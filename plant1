[9:33 pm, 20/8/2024] Siva: import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define data directories (replace with your paths)
train_dir = 'path/to/train/data/directory'
validation_dir = 'path/to/validation/data/directory'

# Data augmentation and preprocessing
train_datagen = ImageDataGenerator(
  rescale=1./255,
  shear_range=0.2,
  zoom_range=0.2,
  horizontal_flip=True
)

validation_datagen = ImageDataGenerator(rescale=1./255)

# Generate batches of augmented data
batch_size = 32

train_generator = train_datagen.flow_from_directory(
  train_dir,
  target_size=(224, 224),
  batch_size=batch_size,
  class_mode='categorical'
)

validation_generator = validation_datagen.flow_from_directory(
  validation_dir,
  target_size=(224, 224),
  batch_size=batch_size,
  class_mode='categorical'
)
[9:33 pm, 20/8/2024] Siva: from tensorflow.keras.applications import ResNet50
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Dropout

# Load pre-trained ResNet50 model without top layers
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze base layers
for layer in base_model.layers:
  layer.trainable = False

# Add new top layers for classification (replace num_classes with your actual number)
model = Sequential([
  base_model,
  Flatten(),
  Dense(256, activation='relu'),
  Dropout(0.5),
  Dense(num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# Train the model (adjust epochs as needed)
epochs = 10
history = model.fit(
  train_generator,
  steps_per_epoch=len(train_generator),
  epochs=epochs,
  validation_data=validation_generator,
  validation_steps=len(validation_generator)
)

# Save the trained model (replace with your desired path)
model.save('path/to/saved/model.h5')
[9:33 pm, 20/8/2024] Siva: from flask import Flask, request, jsonify, render_template
from tensorflow.keras.preprocessing import image
import os

app = Flask(_name_)

# Load trained model (replace with your saved model path)
model_path = 'path/to/saved/model.h5'
model = tf.keras.models.load_model(model_path)

# Define classes (replace with your actual class labels)
class_names = ['class1', 'class2', ...]

# Define upload folder and allowed extensions
upload_folder = 'path/to/upload/folder'
allowed_extensions = {'png', 'jpg', 'jpeg'}

# Function to check file extension
def allowed_file(filename):
  return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensions

@app.route('/')
def index():
  return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
  if 'file' not in request.files:
    return jsonify({'error': 'No file part'})
  
  file = request.files['file']
  
  if file.filename == '':
    return jsonify({'error': 'No selected file'})
  
  if file and allowed_file(file.filename):
    img_path = os.path.join(upload_folder, file.filename)
    file.save(img_path)
    
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array /= 255.0
